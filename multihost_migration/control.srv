AUTHOR = "jzupka@redhat.com (J. Zupka)"
TIME = "MEDIUM"
NAME = "Multi_host migration"
TEST_CATEGORY = "Virtualization"
TEST_CLASS = 'Multihost Migration'
TEST_TYPE = "Server"
SYNC_COUNT = 2
DOC = """
Multihost_migration tests multihost migration with different configuration.

List of test are described in /client/tests/virt/cfg/subtest.cfg.sample.

Environment for test:
Storage:
  Both quest have to have acces to same shared diskplace vhere are images of
  migrated guests placed. (NFS, ...)
Network client hosts:
  Both machine on which are migration tests started have to be in same network.
Netowrk client guests:
  For some test are necessary join guest to same network. (bridge connected
  directly to network).

EXTRA_PARAMS:
  adds extra params to client part of autotest. It is possible use this Extra
  params for closer specific of running test.
  example:
  EXTRA_PARAMS = ""\"
  only pc.migrate_multi_host..ping-pong-stress.cpu_memory..tcp
  ""\"
    start migrate_multi_host only ping-pong-stress test wirh
    cpu and memory load.
"""

from autotest.server import utils

EXTRA_PARAMS = """
    qemu_binary = /usr/bin/qemu-kvm
    qemu_img_binary = /usr/bin/qemu-img
    qemu_io_binary = /usr/bin/qemu-io
    nic_mode = tap
    only qcow2
    only virtio_net
    only virtio_blk
    only smp2
    only no_pci_assignable
    only no_9p_export
    only smallpages
    only pc
    cpu_model = "core2duo"
    cpu_model_flags = ",+sse3"
    only (image_backend=filesystem)
    only i440fx
    mem = 512

    only (vhost_settings=vhost_src_no_dst_no)
    only (mig_protocol=tcp)
    only (booting_phase=after_login_vm)
    only (migraiton_type=mig_online)
    #only (multihost_mig_tests=default), (multihost_mig_tests=speed)
    #only (multihost_mig_tests=default)
    only migrate_multi_host
    #only RHEL.6.4.x86_64
"""

def run(machines):
    job.run_test('multihost_migration', machines=machines,
                 extra_params=EXTRA_PARAMS, cycles=1)

if 'all' in args:
    # Run test with all machines at once.
    run(machines)
else:
    # Grab the pairs (and failures)
    (pairs, failures) = utils.form_ntuples_from_machines(machines, 2)

    # Log the failures
    for failure in failures:
        job.record("FAIL", failure[0], "kvm", failure[1])

    # Now run through each pair and run
job.parallel_simple(run, pairs, log=False)
